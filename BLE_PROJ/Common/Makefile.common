
DEBUG?=0

MK:=mkdir
RM:=rm -r


ifeq (1,$(DEBUG))
NO_ECHO:=
else
NO_ECHO:=@
endif


ifneq (,$(filter clean,$(MAKECMDGOALS)))

OTHER_GOALS=$(filter-out clean,$(MAKECMDGOALS))

ifneq (,$(OTHER_GOALS))
$(info Cannot make anything in parallel with "clean".)
$(info Execute "$(MAKE) clean \
  $(foreach goal, $(OTHER_GOALS),&& $(MAKE) $(goal))" instead.)
$(error Cannot continue)
else # other goals empty
.PHONY: clean

clean:
	$(RM) $(OUTPUT_PROJ_DIR)

endif #  end goals

else # not clean

PLATFORM_SUFFIX := $(if $(filter Windows%,$(OS)),windows,posix)
TOOLCHAIN_CONFIG_FILE := $(COMMON_DIR)/Makefile.$(PLATFORM_SUFFIX)
include $(TOOLCHAIN_CONFIG_FILE)

# $1 path
define quote
'$(subst ','\'',$(1))'
endef

# Toolchain commands
CC      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-gcc)
CXX     := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-c++)
AS      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-as)
AR      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ar) -r
LD      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ld)
NM      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-nm)
OBJDUMP := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objdump)
OBJCOPY := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objcopy)
SIZE    := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-size)
$(if $(shell $(CC) --version),,$(info Cannot find: $(CC).) \
  $(info Please set values in: "$(abspath $(TOOLCHAIN_CONFIG_FILE))") \
  $(info according to the actual configuration of your system.) \
  $(error Cannot continue))

# $1 : target name
# $2 : object files
# $3 : source file
define bind_src_with_obj
$(eval $(2)		:=	$(3))\
$(eval $(2)_TGT	:= 	$(1))\
$(eval $(2): Makefile | $(dir $(2)).)
endef


# $1 : target name
# $2 : src file
define get_objects_file_name
$(OUTPUT_PROJ_DIR)/$(strip $(1))/$(notdir $(2:%.s=%.s.o)).o
endef


# $1 : target name
# $2 : source files
define get_objects_files
$(foreach src_file, $(2),\
	$(eval obj_file:=$(call get_objects_file_name,$(1),$(src_file)))\
	$(eval DEPENDENCES += $(obj_file:%.o=%.d))\
	$(call bind_src_with_obj,$(1),$(obj_file),$(src_file))\
	$(obj_file))
endef

# $1 : target name
# $2 : include folder
define get_paths
$(foreach inc,$(2),-I$(inc))
endef

# $1 : 
# $2 : target name
define target_specific
$($(addsuffix _$(strip $(2)),$(1)))
endef

INC_PATHS = $(call target_specific,INC_PATHS,$($@_TGT))

# $1 : target name
# $2 : output file
define prepare_build
$(eval DEPENDENCES:=)\
$(eval $(2): \
	$(call get_objects_files, $(1),\
		$(SRC_FILES) $(call target_specific,SRC_FILES,$(1))))\
$(-include $(DEPENDENCES))\
$(eval INC_PATHS_$(1):=\
	$(call get_paths, $(1),\
		$(INC_FOLDERS) $(call target_specific,INC_FOLDERS,$(1))))
endef

# $1 : target name
define target_define
$(eval OUTPUT_FILE=$(OUTPUT_PROJ_DIR)/$(strip $(1)))\
$(eval $(1): $(OUTPUT_FILE).out $(OUTPUT_FILE).hex $(OUTPUT_FILE).bin\
		; $(NO_ECHO)echo DONE $(strip $(1)))\
$(call prepare_build,$(1),$(OUTPUT_FILE).out)
endef

# $1 : toolchain
# $2 : Flag
# $3 : slogan
define run
$(info $(3) file : $(notdir $($@)))\
$(NO_ECHO) $(1) -MP -MD -c $($@) -o $@ $(2) $(INC_PATHS)
endef

.PHONY: all $(TARGETS)

all: $(TARGETS)

$(OUTPUT_PROJ_DIR):
	$(MK) $@
$(OUTPUT_PROJ_DIR)/%/.: | $(OUTPUT_PROJ_DIR)
	cd $(OUTPUT_PROJ_DIR) && $(MK) $*

%.c.o:
	$(call run, $(CC) -std=c99, $(CCFLAGS),Compiling)

%.cpp.o:
	$(call run, $(CXX), $(CCFLAGS) $(CXXFLAGS),Compiling)

%.S.o %.s.o.o:
	$(call run, $(CC) -x assembler-with-cpp, $(ASMFLAGS),Assembling)

LD_LIBS               = $^ $(LIB_FILES)

%.out:
	$(info Linking target : $@)
	$(NO_ECHO) $(CC) $(LDFLAGS) $(LD_LIBS) -Wl,-Map=$(@:.out=.map)  -o $@
	$(NO_ECHO)$(SIZE) $@

%.bin: %.out
	$(info Preparing: $@)
	$(NO_ECHO)$(OBJCOPY) -O binary $< $@

%.hex: %.out
	$(info Preparing: $@)
	$(NO_ECHO)$(OBJCOPY) -O ihex $< $@


endif # end clean





