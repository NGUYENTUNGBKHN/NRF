DEBUG?=0
MK:=mkdir
RM:=rm -r

ifeq ($(DEBUG),1)
NO_ECHO:=
else
NO_ECHO:=@
endif

ifneq (,$(filter clean,$(MAKECMDGOALS)))

OTHER_GOALS:=$(filter-out clean,$(MAKECMDGOALS))

ifneq (,$(OTHER_GOALS))
$(error sai cu phap)

else

.PHONY: clean
clean:
	$(RM) $(OUTPUT_PROJ_DIR)
endif

else

PLATFORM_SUFFIX := $(if $(filter Windows%,$(OS)),windows,posix)
TOOLCHAIN_CONFIG_FILE := Makefile.$(PLATFORM_SUFFIX)
include $(TOOLCHAIN_CONFIG_FILE)

# $1 path
define quote
'$(subst ','\'',$(1))'
endef

# Toolchain commands
CC      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-gcc)
CXX     := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-c++)
AS      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-as)
AR      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ar) -r
LD      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ld)
NM      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-nm)
OBJDUMP := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objdump)
OBJCOPY := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objcopy)
SIZE    := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-size)
$(if $(shell $(CC) --version),,$(info Cannot find: $(CC).) \
	$(info Please set values in: "$(abspath $(TOOLCHAIN_CONFIG_FILE))") \
	$(info according to the actual configuration of your system.) \
	$(error Cannot continue))

# $1 : source file
define makesure_exist_file
$(foreach item, $(1)\,
	$(if $(wildcard $(item)),,$(error not dir $(notdir $(item)))))
endef

# $1 : target name
# $2 : source file
# $3 : obj file
define bind_object_with_src
$(eval $(3)     := $(2))\
$(eval $(3)_TGT := $(1))\
$(eval $(3) : Makefile | $(dir $(3)).)
endef

# $1 : target name
# $2 : source name
define get_object_file_name
$(OUTPUT_PROJ_DIR)/$(strip $(1))/$(notdir $(2:%.s=%.s.o)).o
endef

# $1 : target name
# $2 : source file
define get_object_files
$(foreach src_file, $(2),\
    $(eval obj_file := $(call get_object_file_name, $(1), $(src_file)))\
    $(eval DEPENDENCIES += $(obj_file:%.o=%.d))\
    $(call bind_object_with_src, $(1), $(src_file), $(obj_file))\
    $(obj_file))
endef


# $1 : target name
# $2 : include link
define get_inc_path
$(foreach inc, $(2),-I$(inc))
endef

# $1 : prefix name
# $2 : target name
define target_specifies
$($(addsuffix _$(strip $(2)), $(1)))
endef

# $1 : target name
# $2 : out file
define prepare_build
$(eval DEPENDENCIES:=)\
$(eval $(2) : \
    $(call get_object_files, $(1), \
        $(SRC_FILES) $(call target_specifies SRC_FILES, $(1))))\
$(eval -include $(DEPENDENCIES))\
$(eval INC_PATHS_code :=\
    $(call get_inc_path, $(1),\
        $(INC_FOLDER) $(call target_specifies INC_FOLDER, $(1))))
endef

INC_PATHS = $(call target_specifies, INC_PATHS, $($@_TGT))

# $1 : target name
define define_target
$(eval OUTPUT_FILE=$(OUTPUT_PROJ_DIR)/$(strip $(1)))\
$(eval $(1) : $(OUTPUT_FILE).out $(OUTPUT_FILE).hex $(OUTPUT_FILE).bin\
            ; @echo DONE $(strip $(1)))\
$(call prepare_build,$(1),$(OUTPUT_FILE).out)
endef


# $1 : Toolchain
# $2 : Flag
# $3 : commet
define run
$(info $(3) file : $(notdir $($@)))\
$(NO_ECHO) $(1) -MD -MP -c -o $@ $(2) $($@) $(INC_PATHS)
endef

.PHONY: $(TARGETS) all

all: $(TARGETS)

$(OUTPUT_PROJ_DIR):
	$(MK) $@
$(OUTPUT_PROJ_DIR)/%/.: | $(OUTPUT_PROJ_DIR)
	cd $(OUTPUT_PROJ_DIR) && $(MK) $*

%.c.o:
	$(call run, $(CC) -std=c99, $(CCFLAG), Compiling)

%.cpp.o:
	$(call run, $(CC), $(CCFLAG) $(CXXFLAG), Compiling)

%.S.o %.s.o.o:
	$(call run, $(CC) -x assembler-with-cpp, $(ASMFLAG), Assembling)


%.out:
	$(info Link target : $@)
	$(NO_ECHO) $(CC) $(LDFLAGS) $(LIB_FILES) $^ -Wl,-Map=$(@:.out=.map) -o $@
	$(NO_ECHO) $(SIZE) $@ 

%.hex: %.out
	$(info prepare hex : $@)
	$(NO_ECHO) $(OBJCOPY) -O ihex $< $@

%.bin: %.out
	$(info prepare bin : $@)
	$(NO_ECHO) $(OBJCOPY) -O binary $< $@

endif

