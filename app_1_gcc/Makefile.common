

DEBUG ?= 0
ABSOLUTE_PATHS ?= 0
PASS_INCLUDE_PATHS_VIA_FILE ?= 0
PASS_LINKER_INPUT_VIA_FILE ?= 0
MK := mkdir
RM := rm -r

ifneq ($(DEBUG),1)
NO_ECHO := @
else
NO_ECHO := 
endif


ifneq (,$(filter clean, $(MAKECMDGOALS)))

OTHER_GOALS := $(filter-out clean, $(MAKECMDGOALS))
ifeq (,$(OTHER_GOALS))
.PHONY: clean
clean:
	$(RM) $(OUTPUT_PROJ_DIR)
else 
$(info Cannot do command)\
$(error stop)
endif # end (,$(OTHER_GOALS))

else

PLATFORM_SUFFIX := $(if $(filter Windows%,$(OS)),windows,posix)
TOOLCHAIN_CONFIG_FILE := Makefile.$(PLATFORM_SUFFIX)
include $(TOOLCHAIN_CONFIG_FILE)

# $1 path
define quote
'$(subst ','\'',$(1))'
endef

# Toolchain commands
CC      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-gcc)
CXX     := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-c++)
AS      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-as)
AR      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ar) -r
LD      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ld)
NM      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-nm)
OBJDUMP := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objdump)
OBJCOPY := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objcopy)
SIZE    := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-size)
$(if $(shell $(CC) --version),,$(info Cannot find: $(CC).) \
  $(info Please set values in: "$(abspath $(TOOLCHAIN_CONFIG_FILE))") \
  $(info according to the actual configuration of your system.) \
  $(error Cannot continue))

define ensure_exists_each
endef

define target_specific
$($(addsuffix _$(strip $(2)), $(1)))
endef

define get_obj_file_name
$(OUTPUT_PROJ_DIR)/$(strip $(1))/$(notdir $(2:%.s=%.s.o)).o
endef

ifeq ($(PASS_INCLUDE_PATHS_VIA_FILE),1)
INC_PATHS = @$($@_INC)
GENERATE_INC_FILE := 1
else
INC_PATHS = $(call target_specific, INC_PATHS, $($@_TGT))
GENERATE_INC_FILE :=
endif

define bind_obj_with_src
$(eval $(1)     := $(2)) \
$(eval $(1)_INC := $(3)) \
$(eval $(1)_TGT := $(4)) \
$(eval $(1) : Makefile | $(dir $(1)).)\
$(if $(GENERATE_INC_FILE), $(eval $(1): $(3)))
endef

define get_obj_files
$(call ensure_exists_each, $(3))\
$(foreach objs, $(3),\
	$(eval OBJ_FILE := $(call get_obj_file_name,$(1),$(objs)))\
	$(call bind_obj_with_src, $(OBJ_FILE), $(objs), $(2), $(1))\
	$(OBJ_FILE))
endef

ifeq ($(ABSOLUTE_PATHS),1)
get_path = $(call quote,$(abspath $1))
else
get_path = $1
endif

# $1 list of include folders
define get_inc_paths
$(call ensure_exists_each,include folder,$(1)) \
$(foreach folder,$(1),-I$(call get_path,$(folder)))
endef

define prepare_build
$(DEPENDENCIES := )\
$(eval $(3):\
	$(call get_obj_files, $(1), $(2),\
		$(SRC_FILES) $(call target_specific, SRC_FILES, $(1))))\
$(eval -include $(DEPENDENCIES))\
$(eval INC_PATHS_$(strip $(1)) := \
	$(call get_inc_paths,\
		$(INC_FOLDERS) $(call target_specific, INC_FOLDERS, $(1))))
endef


# $1 : target name
define define_target
$(eval OUT_FILE := $(OUTPUT_PROJ_DIR)/$(strip $(1)))\
$(eval $(1): $(OUT_FILE).out $(OUT_FILE).hex $(OUT_FILE).bin\
		; @echo DONE $(strip $(1)))\
$(call prepare_build, $(1), $(OUT_FILE).inc, $(OUT_FILE).out)
endef

define run
$(info $(3) file: $(notdir $($@)))\
$(NO_ECHO)$(1) -MP -MD -c -o $@ $($@) $(2) $(INC_PATHS)
endef

.PHONY: $(TARGETS) all

all: $(TARGETS)

$(OUTPUT_PROJ_DIR):
	$(MK) $@
$(OUTPUT_PROJ_DIR)/%/.: | $(OUTPUT_PROJ_DIR)
	cd $(OUTPUT_PROJ_DIR) && $(MK) $*

%.c.o:
	$(call run,$(CC) -std=c99,$(CFLAGS), Compiling)

%.cpp.o:
	$(call run,$(CC),$(CFLAGS) $(CXXFLAGS), Compiling)

%.S.o %.s.o.o:
	$(call run,$(CC) -x assembler-with-cpp,$(ASMFLAGS), Assembling)

GENERATE_LD_INPUT_FILE =
LD_INPUT               = $^ $(LIB_FILES)

%.out:
	$(info Linking target: $@)
	$(NO_ECHO)$(CC) $(LDFLAGS) $(LD_INPUT) -Wl,-Map=$(@:.out=.map) -o $@
	$(NO_ECHO)$(SIZE) $@


%.hex: %.out
	$(info Preparing: $@)
	$(NO_ECHO)$(OBJCOPY) -O ihex $< $@

%.bin: %.out
	$(info Preparing: $@)
	$(NO_ECHO)$(OBJCOPY) -O binary $< $@


endif # end (,$(filter clean, $(MAKECMDGOALS)))



